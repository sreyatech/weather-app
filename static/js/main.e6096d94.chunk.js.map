{"version":3,"sources":["component/weather/weatherCard.js","component/weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","tempInfo","mood","temp","pressure","humidity","speed","country","sunrise","name","cod","useState","weatherMood","setWeatherMood","date","Date","timeStr","getHours","getMinutes","useEffect","className","toLocaleString","Temp","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","alert","message","weather","main","wind","sys","console","error","type","id","placeholder","value","onChange","e","target","autoFocus","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA4EeA,EA1EK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACVC,EAA8DD,EAA9DC,KAAKC,EAAyDF,EAAzDE,KAAKC,EAAoDH,EAApDG,SAASC,EAA2CJ,EAA3CI,SAASC,EAAkCL,EAAlCK,MAAMC,EAA4BN,EAA5BM,QAAQC,EAAoBP,EAApBO,QAAQC,EAAYR,EAAZQ,KAC1D,GADsER,EAAPS,IACzBC,mBAAS,KAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAGMC,EAAO,IAAIC,KAAW,IADlBP,GAEJQ,EAAO,UAAMF,EAAKG,WAAX,YAAyBH,EAAKI,cAuB3C,OArBAC,qBAAU,WACN,GAAGjB,EACC,OAAOA,GACH,IAAK,SAAWW,EAAe,iBAC/B,MACA,IAAK,OAASA,EAAe,eAC7B,MACA,IAAK,OAASA,EAAe,UAC7B,MACA,IAAK,QAAUA,EAAe,YAC9B,MACA,IAAK,OAASA,EAAe,uBAC7B,MACA,IAAK,QAAUA,EAAe,kBAC9B,MACA,QACeA,EAAe,mBAIxC,CAACX,IAEC,mCACE,0BAASkB,UAAU,SAAnB,UACM,qBAAKA,UAAU,cAAf,SACI,mBAAGA,UAAS,aAAQR,OAExB,sBAAKQ,UAAU,cAAf,UACI,qBAAKA,UAAU,cAAf,SACI,iCAAOjB,EAAP,YAEJ,sBAAKiB,UAAU,cAAf,UACI,qBAAKA,UAAU,mBAAf,SAAmClB,IACnC,sBAAKkB,UAAU,QAAf,UAAwBX,EAAxB,KAAgCF,WAGxC,qBAAKa,UAAU,OAAf,UAAuB,IAAIL,MAAOM,mBAGlC,sBAAKD,UAAU,aAAf,UACI,sBAAKA,UAAU,mBAAf,UACA,sBAAKA,UAAU,oBAAf,UACI,4BAAG,mBAAGA,UAAW,mBACjB,oBAAGA,UAAU,sBAAb,UAAoCJ,EAApC,OAAgD,uBAAhD,eAEJ,sBAAKI,UAAU,oBAAf,UACI,4BAAG,mBAAGA,UAAW,qBACjB,oBAAGA,UAAU,sBAAb,UAAoCf,EAApC,IAA8C,uBAA9C,oBAGJ,sBAAKe,UAAU,mBAAf,UACA,sBAAKA,UAAU,oBAAf,UACI,4BAAG,mBAAGA,UAAW,qBACjB,oBAAGA,UAAU,sBAAb,UAAoChB,EAApC,IAA8C,uBAA9C,iBAEJ,sBAAKgB,UAAU,oBAAf,UACI,4BAAG,mBAAGA,UAAW,wBACjB,oBAAGA,UAAU,sBAAb,UAAoCd,EAApC,IAA2C,uBAA3C,0BCZTgB,EAlDF,WACT,MAAsCX,mBAAS,WAA/C,mBAAOY,EAAP,KAAoBC,EAApB,KACA,EAAgCb,mBAAS,IAAzC,mBAAOV,EAAP,KAAiBwB,EAAjB,KAEMC,EAAc,uCAAG,sDAAAC,EAAA,sEAEXC,EAFW,4DAEgDL,EAFhD,iEAGGM,MAAMD,GAHT,cAGTE,EAHS,gBAIIA,EAAIC,OAJR,OAKA,MADTC,EAJS,QAKPtB,IACJuB,MAAMD,EAAKE,SACM,KAAZF,EAAKtB,KACER,EAAQ8B,EAAKG,QAAQ,GAA1BC,KADc,EAEYJ,EAAKI,KAA/BjC,EAFc,EAEdA,KAAKC,EAFS,EAETA,SAASC,EAFA,EAEAA,SACdC,EAAS0B,EAAKK,KAAd/B,MAHc,EAIK0B,EAAKM,IAAxB/B,EAJc,EAIdA,QAAQC,EAJM,EAINA,QACRC,EAAYuB,EAAZvB,KAAKC,EAAOsB,EAAPtB,IAKZe,EAHkB,CACdvB,OAAKC,OAAKC,WAASC,WAASC,QAAMC,UAAQC,UAAQC,OAAKC,SAI3DuB,MAAMD,EAAKE,SAnBA,kDAsBfK,QAAQC,MAAR,MAtBe,0DAAH,qDA8BpB,OAJArB,qBAAU,WACPO,MACD,IAGE,qCACI,qBAAKN,UAAU,OAAf,SACI,sBAAKA,UAAU,SAAf,UACI,uBAAOqB,KAAK,SAASC,GAAG,SAASC,YAAY,WAAWC,MAAOrB,EAAasB,SAAU,SAACC,GAAD,OAAKtB,EAAesB,EAAEC,OAAOH,QAAQI,WAAS,EAAC5B,UAAU,eAC/I,wBAAQA,UAAU,eAAeqB,KAAK,SAASQ,QAASvB,EAAxD,yBAKR,cAAC,EAAD,CAAazB,SAAUA,QCvCpBiD,EARH,WACV,OACE,mCACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e6096d94.chunk.js","sourcesContent":["import {useState,useEffect} from 'react'\r\n\r\nconst WeatherCard = ({tempInfo}) => {\r\n    const { mood,temp,pressure,humidity,speed,country,sunrise,name,cod} = tempInfo\r\n    const [weatherMood, setWeatherMood] = useState(\"\")\r\n\r\n    let sec = sunrise;\r\n    const date = new Date(sec * 1000);\r\n    const timeStr = `${date.getHours()}:${date.getMinutes()}`\r\n\r\n    useEffect(()=>{\r\n        if(mood){\r\n            switch(mood) {\r\n                case \"Clouds\" : setWeatherMood(\"wi-day-cloudy\")\r\n                break;\r\n                case \"Rain\" : setWeatherMood(\"wi-day-rain\")\r\n                break;\r\n                case \"Haze\" : setWeatherMood(\"wi-fog\")\r\n                break;\r\n                case \"Smoke\" : setWeatherMood(\"wi-smoke\")\r\n                break;\r\n                case \"Mist\" : setWeatherMood(\"wi-night-alt-cloudy\")\r\n                break;\r\n                case \"Clear\" : setWeatherMood(\"wi-night-clear\")\r\n                break;\r\n                default:\r\n                case \"Sunny\" : setWeatherMood(\"wi-day-sunny\")\r\n                break;\r\n            }\r\n        }\r\n    },[mood])\r\n    return (\r\n        <>\r\n          <article className=\"widget\">\r\n                <div className=\"weatherIcon\">\r\n                    <i className={`wi ${weatherMood}`}></i>\r\n                </div>\r\n                <div className=\"weatherInfo\">\r\n                    <div className=\"temperature\">\r\n                        <span>{temp}&deg;</span>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        <div className=\"weatherCondition\">{mood}</div>\r\n                        <div className=\"place\">{name}, {country}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"date\">{new Date().toLocaleString()}</div>\r\n\r\n                {/* 4 column section */}\r\n                <div className=\"extra-temp\">\r\n                    <div className=\"temp-info-minmax\">\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className={\"wi wi-sunset\"}></i></p>\r\n                        <p className=\"extra-info-leftside\">{timeStr} PM <br />Sunset</p>\r\n                    </div>\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className={\"wi wi-humidity\"}></i></p>\r\n                        <p className=\"extra-info-leftside\">{humidity} <br />Humidity</p>\r\n                    </div>\r\n                </div>\r\n                    <div className=\"temp-info-minmax\">\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className={\"wi wi-day-rain\"}></i></p>\r\n                        <p className=\"extra-info-leftside\">{pressure} <br />Pressure</p>\r\n                    </div>\r\n                    <div className=\"two-sided-section\">\r\n                        <p><i className={\"wi wi-strong-wind\"}></i></p>\r\n                        <p className=\"extra-info-leftside\">{speed} <br />Speed</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </article>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","// https://api.openweathermap.org/data/2.5/weather?q=kolkata&appid=c7f84a63badf38bfc958408371676dbc\r\nimport { useState, useEffect } from 'react'\r\nimport './style.css'\r\nimport WeatherCard from './weatherCard'\r\n\r\nconst Temp = () => {\r\n    const [searchValue, setSearchValue] = useState(\"kolkata\")\r\n    const [tempInfo, setTempInfo] = useState({})\r\n\r\n    const getWeatherInfo = async () =>{\r\n        try{\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=c7f84a63badf38bfc958408371676dbc`\r\n            const res = await fetch(url);\r\n            const data = await res.json();\r\n            if(data.cod == 404){\r\n                alert(data.message) \r\n            }else if(data.cod == 200){\r\n                const {main:mood} = data.weather[0]\r\n                const {temp,pressure,humidity} = data.main\r\n                const {speed} = data.wind\r\n                const {country,sunrise} = data.sys\r\n                const {name,cod} = data\r\n                \r\n                const myWeather = {\r\n                    mood,temp,pressure,humidity,speed,country,sunrise,name,cod\r\n                }\r\n                setTempInfo(myWeather)\r\n            }else{\r\n                alert(data.message)\r\n            }\r\n        }catch(e){\r\n            console.error(e)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n       getWeatherInfo();\r\n    },[])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"wrap\">\r\n                <div className=\"search\">\r\n                    <input type=\"search\" id=\"search\" placeholder=\"Seach...\" value={searchValue} onChange={(e)=>setSearchValue(e.target.value)} autoFocus className=\"searchTerm\" />\r\n                    <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>Search</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/* temp card */}\r\n            <WeatherCard tempInfo={tempInfo} />\r\n           \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp\r\n","import React from 'react'\nimport Temp from './component/weather/temp'\nconst App = () => {\n  return (\n    <>\n      <Temp />\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}